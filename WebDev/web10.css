@property --move {
    syntax: "<length>";
    inherits: true;
    initial-value: 0;
  }
  
  :root {
    --color-primary: #2ecc71;     /* Green */
    --color-secondary: #f1c40f;   /* Yellow */
    --color-tertiary: #e74c3c;    /* Red */
    --color-surface: #111;
  }
  
  body {
    width: 100vw;
    height: 100vh;
    display: grid;
    place-items: center;
    background-color: var(--color-surface);
    color: var(--color-primary);
    margin: 0;
    position: relative;
    overflow: hidden;
  }
  
  body::after {
    content: '';
    position: absolute;
    width: 30vmin;
    aspect-ratio: 1;
    border-radius: 50%;
    background: inherit;
    translate: 0 50%;
    filter: blur(1rem);
  }
  
  * {
    box-sizing: border-box;
  }
  
  .container {
    filter: url(#blurFilter) saturate(1.5) brightness(1.1);
  }
  
  .leaf {
    background: radial-gradient(
      color-mix(in srgb, white, transparent 90%),
      color-mix(
        in srgb,
        var(--color-primary),
        hsla(calc(10 * var(--i)), 100%, 50%, 1) 50%
      )
    );
    opacity: 0;
    --size: 20vmin;
    height: var(--size);
    aspect-ratio: 1 / 8;
    border-radius: 50%;
    position: absolute;
    animation: move 0.8s var(--delay) ease infinite;
    --r: calc(var(--move, 0vmin) + 4.2vmin + var(--ri, 0) * var(--size) * 0.44);
    --angle-per-item: calc(360deg / var(--count));
    --ai: calc(var(--angle-per-item) * var(--i));
    translate: calc(cos(var(--ai)) * var(--r))
               calc(sin(var(--ai)) * var(--r) * -1);
    rotate: calc(90deg - 360deg / var(--count) * var(--i));
  }
  
  @keyframes move {
    from {
      --move: 0vmin;
      opacity: 0;
    }
    20%,
    50%,
    70% {
      opacity: 1;
    }
    to {
      --move: 22vmin;
    }
  }
  